diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index ecbf96e..cc4f93f 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -23,6 +23,8 @@
 #include "../lib/ethernet.hpp"
 #include "../lib/event_service.hpp"
 #include "../lib/fan.hpp"
+#include "../lib/mail.hpp"
+#include "../lib/smtp.hpp"
 #include "../lib/log_services.hpp"
 #include "../lib/managers.hpp"
 #include "../lib/message_registries.hpp"
@@ -225,6 +227,10 @@ class RedfishService
 
         nodes.emplace_back(std::make_unique<FansSetMode>(app));
         nodes.emplace_back(std::make_unique<FansGetMode>(app));
+        nodes.emplace_back(std::make_unique<MailsSetMode>(app));
+        nodes.emplace_back(std::make_unique<MailsGetMode>(app));
+        nodes.emplace_back(std::make_unique<SMTPsSetMode>(app));
+        nodes.emplace_back(std::make_unique<SMTPsGetMode>(app));
 
         for (const auto& node : nodes)
         {
diff --git a/redfish-core/lib/mail.hpp b/redfish-core/lib/mail.hpp
new file mode 100644
index 0000000..e47c1ea
--- /dev/null
+++ b/redfish-core/lib/mail.hpp
@@ -0,0 +1,116 @@
+#pragma once
+
+#include "async_resp.hpp"
+#include "dbus_utility.hpp"
+#include "redfish_util.hpp"
+
+#include <variant>
+
+namespace redfish
+{
+
+/**
+ * ChassisResetAction class supports the POST method for the Reset
+ * action.
+ */
+class MailsSetMode : public Node
+{
+  public:
+    MailsSetMode(CrowApp& app) :
+        Node(app, "/redfish/v1/Rikmail/<str>/", std::string())
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    /**
+     * Function handles POST method request.
+     */
+    void doPost(crow::Response& res, const crow::Request& req,
+                const std::vector<std::string>& params) override
+    {
+        BMCWEB_LOG_DEBUG << "Rikmail set mode. Size " << params.size();
+
+        if (params.size() != 1)
+        {
+            messages::internalError(res);
+            res.end();
+            return;
+        }
+        const std::string& newMailMode = params[0];
+        auto aResp = std::make_shared<AsyncResp>(res);
+        crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec,
+                    const std::variant<bool> asserted) {
+                if (ec)
+                {
+                    BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                    messages::internalError(aResp->res);
+                    return;
+                }
+                aResp->res.end();
+            },
+            "xyz.openbmc_project.rikmail",
+            "/xyz/openbmc_project/rikmail",
+            "xyz.openbmc_project.Rikmail", "WriteMode",
+            newMailMode.c_str());
+    }
+};
+
+/**
+ * ChassisResetActionInfo derived class for delivering Chassis
+ * ResetType AllowableValues using ResetInfo schema.
+ */
+class MailsGetMode : public Node
+{
+  public:
+    /*
+     * Default Constructor
+     */
+    MailsGetMode(CrowApp& app) :
+        Node(app, "/redfish/v1/Rikmail/")
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    /**
+     * Functions triggers appropriate requests on DBus
+     */
+    void doGet(crow::Response& res, const crow::Request& req,
+               const std::vector<std::string>& params) override
+    {
+        BMCWEB_LOG_DEBUG << "Rikmail GET mode. Size " << params.size();
+
+        res.jsonValue = {{"@odata.type", "#Rikmail.Mode"},
+                         {"@odata.id", "/redfish/v1/Rikmail/Mode"}};
+
+        auto aResp = std::make_shared<AsyncResp>(res);
+        crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec,
+                    int mode) {
+                if (ec)
+                {
+                    BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                    messages::internalError(aResp->res);
+                    return;
+                }
+                aResp->res.jsonValue["data"] = std::to_string(mode).c_str();
+                aResp->res.end();
+            },
+            "xyz.openbmc_project.rikmail",
+            "/xyz/openbmc_project/rikmail",
+            "xyz.openbmc_project.Rikmail", "ReadMode");
+
+    }
+};
+
+
+} // namespace redfish
diff --git a/redfish-core/lib/smtp.hpp b/redfish-core/lib/smtp.hpp
new file mode 100644
index 0000000..da0192d
--- /dev/null
+++ b/redfish-core/lib/smtp.hpp
@@ -0,0 +1,116 @@
+#pragma once
+
+#include "async_resp.hpp"
+#include "dbus_utility.hpp"
+#include "redfish_util.hpp"
+
+#include <variant>
+
+namespace redfish
+{
+
+/**
+ * ChassisResetAction class supports the POST method for the Reset
+ * action.
+ */
+class SMTPsSetMode : public Node
+{
+  public:
+    SMTPsSetMode(CrowApp& app) :
+        Node(app, "/redfish/v1/Riksmtp/<str>/", std::string())
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    /**
+     * Function handles POST method request.
+     */
+    void doPost(crow::Response& res, const crow::Request& req,
+                const std::vector<std::string>& params) override
+    {
+        BMCWEB_LOG_DEBUG << "Riksmtp set mode. Size " << params.size();
+
+        if (params.size() != 1)
+        {
+            messages::internalError(res);
+            res.end();
+            return;
+        }
+        const std::string& newSMTPMode = params[0];
+        auto aResp = std::make_shared<AsyncResp>(res);
+        crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec,
+                    const std::variant<bool> asserted) {
+                if (ec)
+                {
+                    BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                    messages::internalError(aResp->res);
+                    return;
+                }
+                aResp->res.end();
+            },
+            "xyz.openbmc_project.riksmtp",
+            "/xyz/openbmc_project/riksmtp",
+            "xyz.openbmc_project.Riksmtp", "WriteMode",
+            newSMTPMode.c_str());
+    }
+};
+
+/**
+ * ChassisResetActionInfo derived class for delivering Chassis
+ * ResetType AllowableValues using ResetInfo schema.
+ */
+class SMTPsGetMode : public Node
+{
+  public:
+    /*
+     * Default Constructor
+     */
+    SMTPsGetMode(CrowApp& app) :
+        Node(app, "/redfish/v1/Riksmtp/")
+    {
+        entityPrivileges = {
+            {boost::beast::http::verb::get, {{"Login"}}},
+            {boost::beast::http::verb::head, {{"Login"}}},
+            {boost::beast::http::verb::patch, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::put, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::delete_, {{"ConfigureComponents"}}},
+            {boost::beast::http::verb::post, {{"ConfigureComponents"}}}};
+    }
+
+  private:
+    /**
+     * Functions triggers appropriate requests on DBus
+     */
+    void doGet(crow::Response& res, const crow::Request& req,
+               const std::vector<std::string>& params) override
+    {
+        BMCWEB_LOG_DEBUG << "Riksmtp GET mode. Size " << params.size();
+
+        res.jsonValue = {{"@odata.type", "#Riksmtp.Mode"},
+                         {"@odata.id", "/redfish/v1/Riksmtp/Mode"}};
+
+        auto aResp = std::make_shared<AsyncResp>(res);
+        crow::connections::systemBus->async_method_call(
+            [aResp](const boost::system::error_code ec,
+                    int mode) {
+                if (ec)
+                {
+                    BMCWEB_LOG_DEBUG << "DBUS response error " << ec;
+                    messages::internalError(aResp->res);
+                    return;
+                }
+                aResp->res.jsonValue["data"] = std::to_string(mode).c_str();
+                aResp->res.end();
+            },
+            "xyz.openbmc_project.riksmtp",
+            "/xyz/openbmc_project/riksmtp",
+            "xyz.openbmc_project.Riksmtp", "ReadMode");
+
+    }
+};
+
+
+} // namespace redfish
